plugins {
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'com.gradle.plugin-publish' version '0.18.0'
    id 'java-gradle-plugin'
    id 'groovy'
    id 'jacoco'
    id 'maven-publish'
    //id 'com.stehno.gradle.webpreview' version '0.3.0'
    //id 'com.stehno.gradle.site' version '0.0.3'
    id 'org.asciidoctor.jvm.convert' version '4.0.3'
    id 'org.ajoberstar.git-publish' version '3.0.1'
}

configurations.configureEach {
    resolutionStrategy.dependencySubstitution {
        substitute module('com.burgstaller:okhttp-digest:1.10') \
        using module('io.github.rburgst:okhttp-digest:1.21') \
        because 'okhttp-digest old version was on jcenter, which asciidoctor-gradle-plugin depends on transitively through simplified-jruby-gradle-plugin via http-builder-ng-okhttp '
    }
}

version = '0.3.0'
group = 'it.salmattia.http-plugin'

repositories {
    mavenCentral()
}

configurations {
    groovyDoc
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    groovyDoc 'org.codehaus.groovy:groovy-groovydoc:3.0.22'
    groovyDoc 'org.codehaus.groovy:groovy-ant:3.0.22'

    // TODO: ideally the plugin would download the desired client only
    implementation("io.github.http-builder-ng:http-builder-ng-apache:$httpBuilderVersion") {
        exclude module: 'groovy-all'
    }
    implementation("io.github.http-builder-ng:http-builder-ng-okhttp:$httpBuilderVersion") {
        exclude module: 'groovy-all'
    }

    testImplementation('org.spockframework:spock-core:2.0-groovy-3.0') {
        exclude module: 'groovy-all'
    }
    testImplementation('io.github.cjstehno.ersatz:ersatz-groovy:4.0.1')

    testImplementation('junit:junit:4.13.2')
}

test {
    maxParallelForks = Math.min(Runtime.runtime.availableProcessors(), 8)
}

groovydoc {
    groovyClasspath = configurations.groovyDoc
}

asciidoctor {
    sourceDir file('src/docs/asciidoc')
    resources {
        from("src/site") {
            include 'css/**'
            include 'fonts/**'
            include 'js/**'
        }
    }
    attributes doctype: 'book',
            'source-highlighter': 'coderay',
            'coderay-linenums-mode': 'table',
            icon: 'font',
            linkattrs: true,
            encoding: 'utf-8'
    outputDir file('build/site')
}

license {
    header rootProject.file('config/license_header.txt')
    ext.year = Calendar.instance.get(Calendar.YEAR)
}

gradlePlugin {
    plugins {
        httpPlugin {
            id = 'it.salmattia.http-plugin.http-plugin'
            implementationClass = 'io.github.httpbuilderng.http.HttpPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/salmattia/gradle-http-plugin'
    vcsUrl = 'https://github.com/salmattia/gradle-http-plugin'
    description = 'Gradle plugin to aid in creating HTTP calls as tasks.'
    tags = ['gradle', 'groovy']

    plugins {
        httpPlugin {
            id = 'it.salmattia.http-plugin.http-plugin'
            displayName = 'Gradle HTTP Plugin'
        }
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

task publishSite(type: GradleBuild, group: 'Publishing', description: 'Publishes the documentation web site.', dependsOn: ['asciidoctor']) {
    tasks = ['gitPublishPush']
}

gitPublish {
    repoUri = 'https://github.com/salmattia/gradle-http-plugin.git'
    branch = 'gh-pages'

    contents {
        from(file('build/site')) {
            into '.'
        }
    }
}